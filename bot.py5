import random  
import sqlite3  
import logging  
from aiogram import Bot, Dispatcher, types  
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton  
from aiogram.utils import executor  

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞  
TOKEN = "7809809237:AAH1Lh8agK8YLIpcLske5223xoQX3fmdCZA"  

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤  
PROMO_CODES = ["AMIGO65", "AMIGO58", "AMIGO47", "AMIGO46", "AMIGO44",  
               "AMIGO40", "AMIGO39", "AMIGO36", "AMIGO35", "AMIGO33",  
               "AMIGO32", "AMIGO30", "AMIGO27", "AMIGO23", "AMIGO20"]  

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–æ—Ç–∞  
bot = Bot(token=TOKEN)  
dp = Dispatcher(bot)  

# –í–∫–ª—é—á–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è (–∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–º–∏–ª–æ–∫)  
logging.basicConfig(level=logging.INFO)  

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite  
conn = sqlite3.connect("users.db")  
cursor = conn.cursor()  

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ (—è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î)  
cursor.execute("""  
    CREATE TABLE IF NOT EXISTS users (  
        user_id INTEGER PRIMARY KEY,  
        wallet TEXT,  
        promo_code TEXT  
    )  
""")  

cursor.execute("""  
    CREATE TABLE IF NOT EXISTS reports (  
        user_id INTEGER,  
        report TEXT  
    )  
""")  

conn.commit()  

# üìå –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é  
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)  
keyboard.add(KeyboardButton("Resgatar c√≥digo promocional"))  
keyboard.add(KeyboardButton("Enviar o relat√≥rio"))  
keyboard.add(KeyboardButton("Suporte"))  

# üìå –ö–æ–º–∞–Ω–¥–∞ /start  
@dp.message_handler(commands=["start"])  
async def start(message: types.Message):  
    await message.answer("Estamos muito felizes por ter voc√™ com a gente! Bora ganhar dinheiro f√°cil!", reply_markup=keyboard)  

# üìå –í–∏–¥–∞—á–∞ –ø—Ä–æ–º–æ–∫–æ–¥—É  
@dp.message_handler(lambda message: message.text == "Resgatar c√≥digo promocional")  
async def redeem_promo(message: types.Message):  
    user_id = message.from_user.id  

    cursor.execute("SELECT wallet, promo_code FROM users WHERE user_id = ?", (user_id,))  
    user = cursor.fetchone()  

    if not user:  
        await message.answer("Primeiro, por favor, envie sua carteira cripto para receber seus pagamentos futuros!")  
    elif user[1]:  
        await message.answer(f"Aqui est√° seu c√≥digo promocional! {user[1]} \n\nN√£o se esque√ßa de entrar no nosso grupo: [amigo_bonuses](https://t.me/amigo_bonuses)", parse_mode="Markdown")  
    else:  
        promo_code = random.choice(PROMO_CODES)  
        cursor.execute("UPDATE users SET promo_code = ? WHERE user_id = ?", (promo_code, user_id))  
        conn.commit()  
        await message.answer(f"Valeu! Agora voc√™ est√° oficialmente com a gente. Aqui est√° seu c√≥digo promocional: {promo_code} \n\nN√£o se esque√ßa de entrar no nosso grupo: [amigo_bonuses](https://t.me/amigo_bonuses)", parse_mode="Markdown")  

# üìå –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫—Ä–∏–ø—Ç–æ–≥–∞–º–∞–Ω—Ü—è  
@dp.message_handler(lambda message: message.text.startswith("0x") or message.text.startswith("1") or message.text.startswith("3"))  
async def save_wallet(message: types.Message):  
    user_id = message.from_user.id  
    wallet = message.text.strip()  

    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))  
    user = cursor.fetchone()  

    if user:  
        await message.answer("Voc√™ j√° enviou sua carteira cripto.")  
    else:  
        cursor.execute("INSERT INTO users (user_id, wallet) VALUES (?, ?)", (user_id, wallet))  
        conn.commit()  
        await message.answer("Carteira salva com sucesso! Agora voc√™ pode resgatar seu c√≥digo promocional.")  

# üìå –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–æ–¥–∏–Ω  
@dp.message_handler(lambda message: message.text == "Enviar o relat√≥rio")  
async def send_report(message: types.Message):  
    await message.answer("Quando seu amigo se registrou? (Digite um n√∫mero)")  

@dp.message_handler(lambda message: message.text.isdigit())  
async def save_report(message: types.Message):  
    user_id = message.from_user.id  
    report = message.text.strip()  

    cursor.execute("INSERT INTO reports (user_id, report) VALUES (?, ?)", (user_id, report))  
    conn.commit()  

    await message.answer("Obrigado! Quanto mais amigos, mais grana!")  

# üìå –ü—ñ–¥—Ç—Ä–∏–º–∫–∞  
@dp.message_handler(lambda message: message.text == "Suporte")  
async def support(message: types.Message):  
    await message.answer("Fale com nosso suporte: @RoDrIgO_MATEO")  

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞  
if bot.py == "__main__":  
    executor.start_polling(dp, skip_updates=True)